{% extends 'base.html.twig' %}

{% block title %}Gestion des Utilisateurs - Administration{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .main-content {
            padding-left: 32px;
            padding-right: 32px;
            width: 100%;
        }
        @media (max-width: 900px) {
            .main-content {
                padding-left: 8px;
                padding-right: 8px;
            }
        }
        .stats-card {
            transition: transform 0.2s;
            cursor: pointer;
        }
        .stats-card:hover {
            transform: translateY(-5px);
        }
        .sort-icon::after {
            content: "↕️";
            margin-left: 5px;
            opacity: 0.5;
        }
        .sort-active.asc::after {
            content: "↑";
            opacity: 1;
        }
        .sort-active.desc::after {
            content: "↓";
            opacity: 1;
        }
        .table th {
            cursor: pointer;
            font-weight: bold;
            background: #f8f9fa;
            vertical-align: middle;
        }
        .table-striped tbody tr:nth-of-type(odd) {
            background-color: #f2f6fa;
        }
        .table-hover tbody tr:hover {
            background-color: #e2e6ea;
            transition: background 0.2s;
        }
        .table td, .table th {
            vertical-align: middle;
        }
        .table .text-center {
            text-align: center;
        }
        .status-badge {
            width: 80px;
            cursor: pointer;
        }
        .btn-action {
            margin: 0 2px;
        }
        .avatar-circle {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.1rem;
            background: #6c757d;
            color: #fff;
            margin-right: 8px;
        }
        .table tbody tr {
            animation: fadeIn 0.5s;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px);}
            to { opacity: 1; transform: translateY(0);}
        }
        @media (max-width: 768px) {
            .table-responsive {
                font-size: 0.95rem;
            }
            .avatar-circle {
                width: 28px;
                height: 28px;
                font-size: 0.9rem;
            }
        }
    </style>
{% endblock %}

{% block body %}
<div class="main-content">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div>
            <span class="fw-bold">Utilisateurs affichés : </span><span id="filteredCount">0</span>
        </div>
        <button class="btn btn-outline-secondary" onclick="exportTableToCSV('utilisateurs.csv')">
            <i class="fas fa-file-csv"></i> Exporter CSV
        </button>
    </div>
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Liste des Utilisateurs</h6>
            <div class="d-flex gap-2">
                <input type="text" id="searchInput" class="form-control" placeholder="Rechercher...">
                <select id="roleFilter" class="form-select">
                    <option value="">Tous les rôles</option>
                    <option value="ADMIN">Admin</option>
                    <option value="MANAGER">Manager</option>
                    <option value="EMPLOYE">Employé</option>
                </select>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-hover table-striped align-middle" id="usersTable">
                    <thead class="table-light">
                        <tr>
                            <th></th>
                            <th data-sort="prenom"><i class="fas fa-user"></i> Prénom</th>
                            <th data-sort="email"><i class="fas fa-envelope"></i> Email</th>
                            <th data-sort="role"><i class="fas fa-user-tag"></i> Rôle</th>
                            <th data-sort="adresse"><i class="fas fa-map-marker-alt"></i> Adresse</th>
                            <th data-sort="numTel"><i class="fas fa-phone"></i> Téléphone</th>
                            <th data-sort="is_active"><i class="fas fa-toggle-on"></i> Statut</th>
                            <th><i class="fas fa-cogs"></i> Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Les données seront injectées ici par JavaScript -->
                    </tbody>
                </table>
            </div>
            <!-- Pagination -->
            <div class="d-flex justify-content-between align-items-center mt-3">
                <div class="dataTables_info" id="dataTable_info" role="status" aria-live="polite">
                    Affichage de <span id="startIndex">1</span> à <span id="endIndex">10</span> sur <span id="totalEntries">0</span> entrées
                </div>
                <nav aria-label="Page navigation">
                    <ul class="pagination" id="pagination">
                        <!-- La pagination sera générée par JavaScript -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>
<!-- Modal de modification -->
<div class="modal fade" id="editModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modifier l'utilisateur</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editForm">
                    <input type="hidden" id="editUserId">
                    <div class="mb-3">
                        <label for="editPrenom" class="form-label">Prénom</label>
                        <input type="text" class="form-control" id="editPrenom" required>
                    </div>
                    <div class="mb-3">
                        <label for="editEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="editEmail" required>
                    </div>
                    <div class="mb-3">
                        <label for="editRole" class="form-label">Rôle</label>
                        <select class="form-select" id="editRole" required>
                            <option value="ADMIN">Admin</option>
                            <option value="MANAGER">Manager</option>
                            <option value="EMPLOYE">Employé</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editAdresse" class="form-label">Adresse</label>
                        <input type="text" class="form-control" id="editAdresse">
                    </div>
                    <div class="mb-3">
                        <label for="editNumTel" class="form-label">Téléphone</label>
                        <input type="text" class="form-control" id="editNumTel">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" id="saveEdit">Enregistrer</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        let currentSort = 'email';
        let currentOrder = 'asc';
        let currentPage = 1;
        const itemsPerPage = 10;
        let editModal;

        document.addEventListener('DOMContentLoaded', function() {
            editModal = new bootstrap.Modal(document.getElementById('editModal'));
        });

        function updateTable() {
            const search = document.getElementById('searchInput').value;
            const role = document.getElementById('roleFilter').value;
            
            fetch(`/admin/users/ajax?search=${encodeURIComponent(search)}&sort=${currentSort}&order=${currentOrder}&role=${role}&page=${currentPage}&limit=${itemsPerPage}`)
                .then(response => response.json())
                .then(data => {
                    // Mise à jour du tableau
                    const tbody = document.querySelector('#usersTable tbody');
                    tbody.innerHTML = '';
                    let filteredCount = 0;
                    if (data.users.length === 0) {
                        tbody.innerHTML = `<tr><td colspan="8" class="text-center text-muted">Aucun utilisateur trouvé.</td></tr>`;
                        document.getElementById('filteredCount').textContent = 0;
                        updatePagination({total:0,limit:itemsPerPage});
                        return;
                    }
                    data.users.forEach(user => {
                        filteredCount++;
                        // Avatar généré
                        const initials = ((user.prenom ? user.prenom[0] : '') + (user.nom ? user.nom[0] : '')).toUpperCase();
                        // Badge de rôle
                        let roleBadge = '';
                        if (user.role === 'ADMIN') {
                            roleBadge = '<span class="badge bg-danger"><i class="fas fa-user-shield"></i> Admin</span>';
                        } else if (user.role === 'MANAGER') {
                            roleBadge = '<span class="badge bg-warning text-dark"><i class="fas fa-user-tie"></i> Manager</span>';
                        } else {
                            roleBadge = '<span class="badge bg-info text-dark"><i class="fas fa-user"></i> Employé</span>';
                        }
                        // Statut switch
                        const statusSwitch = `<div class=\"form-check form-switch\"><input class=\"form-check-input\" type=\"checkbox\" ${user.is_active ? 'checked' : ''} onchange=\"toggleStatus(${user.id})\"><label class=\"form-check-label\">${user.is_active ? 'Actif' : 'Inactif'}</label></div>`;
                        tbody.innerHTML += `
                            <tr>
                                <td><div class=\"avatar-circle\">${initials}</div></td>
                                <td>${user.prenom || '-'}</td>
                                <td>${user.email}</td>
                                <td>${roleBadge}</td>
                                <td>${user.adresse || '-'}</td>
                                <td>${user.numTel || '-'}</td>
                                <td class=\"text-center\">${statusSwitch}</td>
                                <td class=\"text-center\">
                                    <button class=\"btn btn-sm btn-primary btn-action\" onclick=\"editUser(${user.id}, this)\" title=\"Modifier\">
                                        <i class=\"fas fa-edit\"></i>
                                    </button>
                                    <button class=\"btn btn-sm btn-danger btn-action\" onclick=\"deleteUser(${user.id}, this)\" title=\"Supprimer\">
                                        <i class=\"fas fa-trash\"></i>
                                    </button>
                                </td>
                            </tr>`;
                    });
                    document.getElementById('filteredCount').textContent = filteredCount;
                    // Mise à jour de la pagination
                    updatePagination(data.pagination);
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    alert('Une erreur est survenue lors du chargement des données.');
                });
        }

        function getRoleBadge(role) {
            const badges = {
                'ADMIN': '<span class="badge bg-danger"><i class="fas fa-user-shield"></i> Admin</span>',
                'MANAGER': '<span class="badge bg-warning text-dark"><i class="fas fa-user-tie"></i> Manager</span>',
                'EMPLOYE': '<span class="badge bg-info text-dark"><i class="fas fa-user"></i> Employé</span>'
            };
            return badges[role] || role;
        }

        function toggleStatus(userId) {
            fetch(`/admin/users/${userId}/toggle-active`, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    updateTable();
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                alert('Une erreur est survenue lors de la mise à jour du statut.');
            });
        }

        function editUser(userId, button) {
            const row = button.closest('tr');
            const user = {
                id: userId,
                prenom: row.cells[1].textContent.trim(),
                email: row.cells[2].textContent.trim(),
                role: row.cells[3].textContent.trim(),
                adresse: row.cells[4].textContent.trim(),
                numTel: row.cells[5].textContent.trim()
            };

            document.getElementById('editUserId').value = user.id;
            document.getElementById('editPrenom').value = user.prenom === '-' ? '' : user.prenom;
            document.getElementById('editEmail').value = user.email;
            document.getElementById('editRole').value = user.role;
            document.getElementById('editAdresse').value = user.adresse === '-' ? '' : user.adresse;
            document.getElementById('editNumTel').value = user.numTel === '-' ? '' : user.numTel;

            editModal.show();
        }

        document.getElementById('saveEdit').addEventListener('click', function() {
            const userId = document.getElementById('editUserId').value;
            const userData = {
                prenom: document.getElementById('editPrenom').value,
                email: document.getElementById('editEmail').value,
                role: document.getElementById('editRole').value,
                adresse: document.getElementById('editAdresse').value,
                numTel: document.getElementById('editNumTel').value
            };

            fetch(`/admin/users/${userId}/edit`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(userData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    editModal.hide();
                    updateTable();
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                alert('Une erreur est survenue lors de la mise à jour de l\'utilisateur.');
            });
        });

        function deleteUser(userId, button) {
            if (confirm('Êtes-vous sûr de vouloir supprimer cet utilisateur ?')) {
                fetch(`/admin/users/${userId}`, {
                    method: 'DELETE',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message) {
                        button.closest('tr').remove();
                        updateTable();
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    alert('Une erreur est survenue lors de la suppression.');
                });
            }
        }

        function updatePagination(pagination) {
            const totalPages = Math.ceil(pagination.total / pagination.limit);
            const paginationElement = document.getElementById('pagination');
            paginationElement.innerHTML = '';

            // Bouton précédent
            paginationElement.innerHTML += `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Précédent</a>
                </li>`;

            // Pages
            for (let i = 1; i <= totalPages; i++) {
                paginationElement.innerHTML += `
                    <li class="page-item ${currentPage === i ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                    </li>`;
            }

            // Bouton suivant
            paginationElement.innerHTML += `
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Suivant</a>
                </li>`;

            // Mise à jour des informations de pagination
            const startIndex = ((currentPage - 1) * pagination.limit) + 1;
            const endIndex = Math.min(startIndex + pagination.limit - 1, pagination.total);
            document.getElementById('startIndex').textContent = startIndex;
            document.getElementById('endIndex').textContent = endIndex;
            document.getElementById('totalEntries').textContent = pagination.total;
        }

        function changePage(page) {
            if (page < 1) return;
            currentPage = page;
            updateTable();
        }

        // Gestionnaires d'événements
        document.getElementById('searchInput').addEventListener('input', () => {
            currentPage = 1;
            updateTable();
        });

        document.getElementById('roleFilter').addEventListener('change', () => {
            currentPage = 1;
            updateTable();
        });

        document.querySelectorAll('#usersTable th[data-sort]').forEach(th => {
            th.addEventListener('click', () => {
                const sort = th.dataset.sort;
                if (currentSort === sort) {
                    currentOrder = currentOrder === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSort = sort;
                    currentOrder = 'asc';
                }
                // Mise à jour des icônes de tri
                document.querySelectorAll('#usersTable th').forEach(header => {
                    header.classList.remove('sort-active', 'asc', 'desc');
                });
                th.classList.add('sort-active', currentOrder);
                updateTable();
            });
        });

        // Export CSV
        function exportTableToCSV(filename) {
            var csv = [];
            var rows = document.querySelectorAll("#usersTable tr");
            for (var i = 0; i < rows.length; i++) {
                var row = [], cols = rows[i].querySelectorAll("td, th");
                for (var j = 0; j < cols.length; j++)
                    row.push('"' + cols[j].innerText.replace(/"/g, '""') + '"');
                csv.push(row.join(","));
            }
            var csvFile = new Blob([csv.join("\n")], { type: "text/csv" });
            var downloadLink = document.createElement("a");
            downloadLink.download = filename;
            downloadLink.href = window.URL.createObjectURL(csvFile);
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
            downloadLink.click();
        }
        window.exportTableToCSV = exportTableToCSV;

        // Chargement initial
        updateTable();
    </script>
{% endblock %} 
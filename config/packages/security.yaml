security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
<<<<<<< HEAD
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
=======
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
>>>>>>> 09b8388c89382e4ec195998d936bfb04cb5d37ed
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
<<<<<<< HEAD
            provider: app_user_provider
            entry_point: App\Security\LoginFormAuthenticator
            custom_authenticators:
                - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                target: app_login
=======
            provider: users_in_memory
>>>>>>> 09b8388c89382e4ec195998d936bfb04cb5d37ed

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
<<<<<<< HEAD
        - { path: ^/dashboard, roles: [ROLE_ADMIN, ROLE_MANAGER] }
        - { path: ^/employee, roles: ROLE_USER }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/user/settings, roles: ROLE_USER }
        - { path: ^/travel-request, roles: ROLE_USER }
        - { path: ^/expense, roles: ROLE_USER }
        - { path: ^/admin, roles: ROLE_ADMIN }
=======
>>>>>>> 09b8388c89382e4ec195998d936bfb04cb5d37ed

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
<<<<<<< HEAD
            # reduces the work factor to the minimum possible values.
=======
            # reduces the work factor to the lowest possible values.
>>>>>>> 09b8388c89382e4ec195998d936bfb04cb5d37ed
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
